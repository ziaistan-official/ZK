name: Make Apk CI

on:
  # This allows you to trigger the workflow manually from the "Actions" tab on GitHub.
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # --- STEP 1: AUTOMATED KEY GENERATION ---
      # This step creates a new, temporary release key for every build.
      # WARNING: This is NOT a secure practice for production apps.
      # The passwords are hardcoded here.
      - name: Generate Temporary Release Keystore
        run: |
          keytool -genkeypair \
            -dname "CN=GitHub Actions, OU=Automated Build, O=Open Source, L=Unknown, ST=Unknown, C=US" \
            -keystore release.keystore \
            -alias release-alias \
            -storepass insecure_password_123 \
            -keypass insecure_password_123 \
            -keyalg RSA -keysize 2048 -validity 1

      # --- STEP 2, 3 & 4: AUTOMATED BUILD & SIGN ---
      # This step uses the key generated above to build a release APK.
      - name: Build and Sign Release APK
        run: ./gradlew assembleRelease
        env:
          # These environment variables match what your build.gradle.kts file expects.
          # We use the hardcoded passwords from the step above.
          RELEASE_KEYSTORE: release.keystore
          RELEASE_KEYSTORE_PASSWORD: "insecure_password_123"
          RELEASE_KEY_ALIAS: "release-alias"
          RELEASE_KEY_PASSWORD: "insecure_password_123"

      - name: Upload Release APK as Artifact
        # The final signed APK will be available for download from the workflow run's page.
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ github.run_number }}
          path: build/outputs/apk/release/*.apk
